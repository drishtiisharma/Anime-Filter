{"ast":null,"code":"export const processFile=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=e=>{const content=e.target.result;let animeList=[];const fileType=file.name.split('.').pop().toLowerCase();if(fileType==='txt'){animeList=content.split('\\n').filter(line=>line.trim()!=='');}else if(fileType==='html'||fileType==='xml'){// Create a temporary DOM parser to extract anime titles\nconst parser=new DOMParser();const doc=parser.parseFromString(content,'text/html');const animeElements=doc.querySelectorAll('anime');animeList=Array.from(animeElements).map(el=>el.textContent.trim());}else{reject(new Error('Unsupported file type'));return;}resolve(animeList);};reader.onerror=()=>{reject(new Error('Failed to read file'));};reader.readAsText(file);});};","map":{"version":3,"names":["processFile","file","Promise","resolve","reject","reader","FileReader","onload","e","content","target","result","animeList","fileType","name","split","pop","toLowerCase","filter","line","trim","parser","DOMParser","doc","parseFromString","animeElements","querySelectorAll","Array","from","map","el","textContent","Error","onerror","readAsText"],"sources":["C:/Users/HP/Desktop/Github-Projects/Projects/Anime-Filter-App/src/utils/fileParser.js"],"sourcesContent":["export const processFile = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      let animeList = [];\r\n      \r\n      const fileType = file.name.split('.').pop().toLowerCase();\r\n      \r\n      if (fileType === 'txt') {\r\n        animeList = content.split('\\n').filter(line => line.trim() !== '');\r\n      } else if (fileType === 'html' || fileType === 'xml') {\r\n        // Create a temporary DOM parser to extract anime titles\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(content, 'text/html');\r\n        const animeElements = doc.querySelectorAll('anime');\r\n        animeList = Array.from(animeElements).map(el => el.textContent.trim());\r\n      } else {\r\n        reject(new Error('Unsupported file type'));\r\n        return;\r\n      }\r\n      \r\n      resolve(animeList);\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n};"],"mappings":"AAAA,MAAO,MAAM,CAAAA,WAAW,CAAIC,IAAI,EAAK,CACnC,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAE/BD,MAAM,CAACE,MAAM,CAAIC,CAAC,EAAK,CACrB,KAAM,CAAAC,OAAO,CAAGD,CAAC,CAACE,MAAM,CAACC,MAAM,CAC/B,GAAI,CAAAC,SAAS,CAAG,EAAE,CAElB,KAAM,CAAAC,QAAQ,CAAGZ,IAAI,CAACa,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAEzD,GAAIJ,QAAQ,GAAK,KAAK,CAAE,CACtBD,SAAS,CAAGH,OAAO,CAACM,KAAK,CAAC,IAAI,CAAC,CAACG,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAC,CACpE,CAAC,IAAM,IAAIP,QAAQ,GAAK,MAAM,EAAIA,QAAQ,GAAK,KAAK,CAAE,CACpD;AACA,KAAM,CAAAQ,MAAM,CAAG,GAAI,CAAAC,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,eAAe,CAACf,OAAO,CAAE,WAAW,CAAC,CACxD,KAAM,CAAAgB,aAAa,CAAGF,GAAG,CAACG,gBAAgB,CAAC,OAAO,CAAC,CACnDd,SAAS,CAAGe,KAAK,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,GAAG,CAACC,EAAE,EAAIA,EAAE,CAACC,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CACxE,CAAC,IAAM,CACLhB,MAAM,CAAC,GAAI,CAAA4B,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAC1C,OACF,CAEA7B,OAAO,CAACS,SAAS,CAAC,CACpB,CAAC,CAEDP,MAAM,CAAC4B,OAAO,CAAG,IAAM,CACrB7B,MAAM,CAAC,GAAI,CAAA4B,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAC1C,CAAC,CAED3B,MAAM,CAAC6B,UAAU,CAACjC,IAAI,CAAC,CACzB,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}